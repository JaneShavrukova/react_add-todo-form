{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","services/UserService.ts","components/TodoForm/TodoForm.tsx","App.tsx","api/todos.ts","services/IdServices.ts","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","classNames","completed","title","TodoList","todos","map","username","getUserById","userId","usersFromServer","find","TodoForm","addTodo","largestId","useState","setTitle","hasTitleError","setHasTitleError","SetUserId","hasUserError","setHasUserError","action","method","onSubmit","event","preventDefault","trim","htmlFor","type","value","onChange","target","placeholder","disabled","initialsTodos","App","setTodos","elements","length","ids","element","Math","max","getLargestId","newTodo","currentTodos","ReactDOM","render","document","getElementById"],"mappings":"4OAOaA,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACvC,mBAAGC,UAAU,WAAWC,KAAI,wBAAYF,QAAZ,IAAYA,OAAZ,EAAYA,EAAMG,OAA9C,gBACGH,QADH,IACGA,OADH,EACGA,EAAMI,QCCEC,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACvC,0BACE,UAASA,EAAKC,GACdN,UAAWO,IAAW,WAAY,CAChC,uBAA0C,IAAnBF,EAAKG,YAHhC,UAME,oBAAIR,UAAU,kBAAd,SACGK,EAAKI,QAGPJ,EAAKN,MACJ,cAAC,EAAD,CAAUA,KAAMM,EAAKN,WCbdW,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACvC,yBAASX,UAAU,WAAnB,SACGW,EAAMC,KAAI,SAAAP,GAAI,OACb,cAAC,EAAD,CACEA,KAAMA,GACDA,EAAKC,UCdH,GACb,CACEA,GAAI,EACJH,KAAM,gBACNU,SAAU,OACVX,MAAO,qBAET,CACEI,GAAI,EACJH,KAAM,eACNU,SAAU,YACVX,MAAO,qBAET,CACEI,GAAI,EACJH,KAAM,mBACNU,SAAU,WACVX,MAAO,sBAET,CACEI,GAAI,EACJH,KAAM,mBACNU,SAAU,WACVX,MAAO,6BAET,CACEI,GAAI,EACJH,KAAM,mBACNU,SAAU,SACVX,MAAO,4BAET,CACEI,GAAI,EACJH,KAAM,uBACNU,SAAU,mBACVX,MAAO,2BAET,CACEI,GAAI,EACJH,KAAM,kBACNU,SAAU,eACVX,MAAO,0BAET,CACEI,GAAI,EACJH,KAAM,2BACNU,SAAU,gBACVX,MAAO,wBAET,CACEI,GAAI,EACJH,KAAM,kBACNU,SAAU,WACVX,MAAO,2BAET,CACEI,GAAI,GACJH,KAAM,qBACNU,SAAU,iBACVX,MAAO,2BCxDEY,EAAc,SAACC,GAC1B,OAAOC,EAAgBC,MAAK,SAAAlB,GAAI,OAAIA,EAAKO,KAAOS,MAAW,MCOhDG,EAA4B,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UACnD,EAA0BC,mBAAS,IAAnC,mBAAOZ,EAAP,KAAca,EAAd,KACA,EAA0CD,oBAAS,GAAnD,mBAAOE,EAAP,KAAsBC,EAAtB,KAEA,EAA4BH,mBAAS,GAArC,mBAAON,EAAP,KAAeU,EAAf,KACA,EAAwCJ,oBAAS,GAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAsCA,OACE,uBACEC,OAAO,aACPC,OAAO,OACPC,SAzBa,SAACC,GAChBA,EAAMC,iBAENR,GAAkBf,EAAMwB,QACxBN,GAAiBZ,GAEZN,EAAMwB,QAAWlB,IAItBI,EAAQ,CACNb,GAAIc,EAAY,EAChBX,QACAM,SACAP,WAAW,EACXT,KAAMe,EAAYC,KAnBpBO,EAAS,IACTG,EAAU,KAyBV,UAKE,sBAAKzB,UAAU,QAAf,UACE,uBAAOkC,QAAQ,QAAf,oBAIA,uBACE5B,GAAG,QACH6B,KAAK,OACLC,MAAO3B,EACP4B,SAnDkB,SAACN,GACzBT,EAASS,EAAMO,OAAOF,OACtBZ,GAAiB,IAkDX,UAAQ,aACRe,YAAY,kBAGbhB,GAAiB,sBAAMvB,UAAU,QAAhB,qCAGpB,sBAAKA,UAAU,QAAf,UACE,uBAAOkC,QAAQ,SAAf,mBAGA,yBACE5B,GAAG,SACH8B,MAAOrB,EACP,UAAQ,aACRsB,SA9DmB,SAACN,GAC1BN,GAAWM,EAAMO,OAAOF,OACxBT,GAAgB,IAwDZ,UAME,wBAAQS,MAAM,IAAII,UAAQ,EAA1B,2BAECxB,EAAgBJ,KAAI,SAAAb,GAAI,OACvB,wBAAQqC,MAAOrC,EAAKO,GAApB,SACGP,EAAKI,MADqBJ,EAAKO,UAMrCoB,GAAgB,sBAAM1B,UAAU,QAAhB,qCAGnB,wBAAQmC,KAAK,SAAS,UAAQ,eAA9B,qBCvFAM,ECZS,CACb,CACEnC,GAAI,EACJG,MAAO,qBACPD,WAAW,EACXO,OAAQ,GAEV,CACET,GAAI,GACJG,MAAO,kBACPD,WAAW,EACXO,OAAQ,GAEV,CACET,GAAI,EACJG,MAAO,qCACPD,WAAW,EACXO,OAAQ,IDLkCH,KAAI,SAAAP,GAAI,kCAE/CA,GAF+C,IAGlDN,KAAMe,EAAYT,EAAKU,aAId2B,EAAgB,WAC3B,MAA0BrB,mBAAiBoB,GAA3C,mBAAO9B,EAAP,KAAcgC,EAAd,KAMMvB,EExBoB,SAACwB,GAC3B,GAAwB,IAApBA,EAASC,OACX,OAAO,EAGT,IAAMC,EAAMF,EAAShC,KAAI,SAAAmC,GAAO,OAAIA,EAAQzC,MAE5C,OAAO0C,KAAKC,IAAL,MAAAD,KAAI,YAAQF,IFiBDI,CAAavC,GAE/B,OACE,sBAAKX,UAAU,MAAf,UACE,+CAEA,cAAC,EAAD,CAAUmB,QAVE,SAACgC,GACfR,GAAS,SAAAS,GAAY,4BAAQA,GAAR,CAAsBD,QASb/B,UAAWA,IACvC,cAAC,EAAD,CAAUT,MAAOA,QG9BvB0C,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.7aeee20c.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../../types/User';\n\ninterface Props {\n  user: User\n}\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n    {user?.name}\n  </a>\n);\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ninterface Props {\n  todo: Todo\n}\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => (\n  <article\n    data-id={todo.id}\n    className={classNames('TodoInfo', {\n      'TodoInfo--completed': todo.completed === true,\n    })}\n  >\n    <h2 className=\"TodoInfo__title\">\n      {todo.title}\n    </h2>\n\n    {todo.user && (\n      <UserInfo user={todo.user} />\n    )}\n\n  </article>\n);\n","import React from 'react';\n\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: Todo[]\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo\n        todo={todo}\n        key={todo.id}\n      />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../types/User';\nimport usersFromServer from '../api/users';\n\nexport const getUserById = (userId: number): User | null => {\n  return usersFromServer.find(user => user.id === userId) || null;\n};\n","import React, { useState } from 'react';\n\nimport usersFromServer from '../../api/users';\nimport { getUserById } from '../../services/UserService';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  addTodo: (todo: Todo) => void\n  largestId: number\n}\n\nexport const TodoForm: React.FC<Props> = ({ addTodo, largestId }) => {\n  const [title, setTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(false);\n\n  const [userId, SetUserId] = useState(0);\n  const [hasUserError, setHasUserError] = useState(false);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setHasTitleError(false);\n  };\n\n  const handleUserIdChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    SetUserId(+event.target.value);\n    setHasUserError(false);\n  };\n\n  const resetForm = () => {\n    setTitle('');\n    SetUserId(0);\n  };\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setHasTitleError(!title.trim());\n    setHasUserError(!userId);\n\n    if (!title.trim() || !userId) {\n      return;\n    }\n\n    addTodo({\n      id: largestId + 1,\n      title,\n      userId,\n      completed: false,\n      user: getUserById(userId),\n    });\n\n    resetForm();\n  };\n\n  return (\n    <form\n      action=\"/api/todos\"\n      method=\"POST\"\n      onSubmit={onSubmit}\n    >\n      <div className=\"field\">\n        <label htmlFor=\"title\">\n          Title:\n        </label>\n\n        <input\n          id=\"title\"\n          type=\"text\"\n          value={title}\n          onChange={handleTitleChange}\n          data-cy=\"titleInput\"\n          placeholder=\"Enter a title\"\n        />\n\n        {hasTitleError && <span className=\"error\">Please enter a title</span>}\n      </div>\n\n      <div className=\"field\">\n        <label htmlFor=\"UserId\">\n          User:\n        </label>\n        <select\n          id=\"UserId\"\n          value={userId}\n          data-cy=\"userSelect\"\n          onChange={handleUserIdChange}\n        >\n          <option value=\"0\" disabled>Choose a user</option>\n\n          {usersFromServer.map(user => (\n            <option value={user.id} key={user.id}>\n              {user.name}\n            </option>\n          ))}\n        </select>\n\n        {hasUserError && <span className=\"error\">Please choose a user</span>}\n      </div>\n\n      <button type=\"submit\" data-cy=\"submitButton\">\n        Add\n      </button>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport todosFromServer from './api/todos';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoForm } from './components/TodoForm/TodoForm';\n\nimport { getUserById } from './services/UserService';\nimport { getLargestId } from './services/IdServices';\nimport { Todo } from './types/Todo';\n\nconst initialsTodos: Todo[] = todosFromServer.map(todo => (\n  {\n    ...todo,\n    user: getUserById(todo.userId),\n  }\n));\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>(initialsTodos);\n\n  const addTodo = (newTodo: Todo) => {\n    setTodos(currentTodos => [...currentTodos, newTodo]);\n  };\n\n  const largestId = getLargestId(todos);\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <TodoForm addTodo={addTodo} largestId={largestId} />\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { Todo } from '../types/Todo';\n\nexport const getLargestId = (elements: Todo[]) => {\n  if (elements.length === 0) {\n    return 0;\n  }\n\n  const ids = elements.map(element => element.id);\n\n  return Math.max(...ids);\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}